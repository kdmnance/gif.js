{"version":3,"sources":["/gif.worker.coffee","/GIFEncoder.js","/LZWEncoder.js","/rgbquant.js"],"names":["GIFEncoder","renderFrame","require","frame","encoder","stream","transfer","page","self","event","NeuQuant","LZWEncoder","ByteArray","pages","newPage","pageSize","charMap","i","String","fromCharCode","prototype","Uint8Array","cursor","getData","rv","p","length","writeByte","val","writeUTFBytes","string","l","charCodeAt","writeBytes","array","offset","width","height","transparent","transIndex","repeat","delay","image","pixels","indexedPixels","colorDepth","colorTab","usedEntry","Array","palSize","dispose","firstFrame","sample","dither","globalPalette","out","setDelay","milliseconds","Math","round","setFrameRate","fps","setDispose","disposalCode","setRepeat","setTransparent","color","addFrame","imageData","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeImageDesc","writePixels","finish","setQuality","quality","setDither","setGlobalPalette","palette","getGlobalPalette","slice","writeHeader","imgq","buildColormap","getColormap","ditherPixels","replace","match","indexPixels","findClosest","nPix","k","j","index","findClosestRGB","kernel","serpentine","kernels","FalseFloydSteinberg","FloydSteinberg","Stucki","Atkinson","ds","data","direction","y","x","xend","idx","r1","g1","b1","r2","g2","b2","er","eg","eb","end","x1","y1","d","max","min","c","used","r","g","b","minpos","dmin","len","dr","dg","db","parseInt","w","h","count","transp","disp","writeShort","n","pValue","enc","encode","module","exports","EOF","BITS","HSIZE","masks","initCodeSize","accum","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","clear_flg","g_init_bits","ClearCode","EOFCode","char_out","outs","flush_char","cl_block","cl_hash","output","hsize","compress","init_bits","fcode","ent","hsize_reg","hshift","n_bits","MAXCODE","nextPixel","remaining","curPixel","pix","code","RgbQuant","opts","method","colors","initColors","initDist","distIncr","hueGroups","satGroups","lumGroups","minHueCols","hueStats","HueStats","boxSize","boxPxls","palLocked","dithKern","dithSerp","dithDelta","histogram","idxrgb","idxi32","i32idx","i32rgb","useCache","cacheFreq","reIndex","colorDist","distManhattan","distEuclidean","forEach","rgb","i32","img","getImageData","colorStats1D","buf32","colorStats2D","reduce","retType","buildPal","out32","Uint32Array","nearestColor","buffer","Jarvis","Burkes","Sierra","TwoSierra","SierraLite","dir","lni","i32x","dist","lni2","idx2","r3","g3","b3","r4","g4","b4","noSort","histG","sorted","sortedHashKeys","cols","last","freq","pos","push","inject","map","v","reducePal","sortPal","cacheHistogram","tuples","prunePal","keep","uniques","pruned","nearestIndex","palLen","thold","memDist","pxi","i32i","pxj","i32j","sort","call","a","num","col","check","boxW","boxH","area","boxes","makeBoxes","box","effc","histL","iterBox","idxA","idxB","rgbA","rgbB","hslA","rgb2hsl","hslB","hueA","hueGroup","hueB","hueDiff","lumDiff","lumGroup","toFixed","satDiff","satGroup","s","numGroups","minCols","stats","groupsFull","checkHue","hg","gr","injectHues","typeOf","indexOf","Pr","Pg","Pb","rgb2lum","sqrt","rd","gd","bd","euclMax","rgb0","rgb1","manhMax","abs","hue","segs","seg","haf","mid","sat","lum","Object","toString","isArrSortStable","stableSort","fn","type","ord","str","split","join","can","ctx","imgd","buf8","document","createElement","naturalWidth","naturalHeight","getContext","drawImage","canvas","wid","hgt","w0","h0","wnum","wrem","hnum","hrem","yend","bxs","bbox","i0","i1","cnt","incr","obj","desc","keys","key"],"mappings":"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","sourceRoot":"../src","sourcesContent":["GIFEncoder = require './GIFEncoder.js'\n\nrenderFrame = (frame) ->\n  encoder = new GIFEncoder frame.width, frame.height\n\n  if frame.index is 0\n    encoder.writeHeader()\n  else\n    encoder.firstFrame = false\n\n  encoder.setTransparent frame.transparent\n  encoder.setRepeat frame.repeat\n  encoder.setDelay frame.delay\n  encoder.setQuality frame.quality\n  encoder.setDither frame.dither\n  encoder.setGlobalPalette frame.globalPalette\n  encoder.addFrame frame.data\n  encoder.finish() if frame.last\n  if frame.globalPalette == true\n    frame.globalPalette = encoder.getGlobalPalette()\n\n  stream = encoder.stream()\n  frame.data = stream.pages\n  frame.cursor = stream.cursor\n  frame.pageSize = stream.constructor.pageSize\n\n  if frame.canTransfer\n    transfer = (page.buffer for page in frame.data)\n    self.postMessage frame, transfer\n  else\n    self.postMessage frame\n\nself.onmessage = (event) -> renderFrame event.data\n","/*\n  GIFEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n*/\n\nvar NeuQuant = require('./rgbquant.js');\nvar LZWEncoder = require('./LZWEncoder.js');\n\nfunction ByteArray() {\n  this.page = -1;\n  this.pages = [];\n  this.newPage();\n}\n\nByteArray.pageSize = 4096;\nByteArray.charMap = {};\n\nfor (var i = 0; i < 256; i++)\n  ByteArray.charMap[i] = String.fromCharCode(i);\n\nByteArray.prototype.newPage = function() {\n  this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n  this.cursor = 0;\n};\n\nByteArray.prototype.getData = function() {\n  var rv = '';\n  for (var p = 0; p < this.pages.length; p++) {\n    for (var i = 0; i < ByteArray.pageSize; i++) {\n      rv += ByteArray.charMap[this.pages[p][i]];\n    }\n  }\n  return rv;\n};\n\nByteArray.prototype.writeByte = function(val) {\n  if (this.cursor >= ByteArray.pageSize) this.newPage();\n  this.pages[this.page][this.cursor++] = val;\n};\n\nByteArray.prototype.writeUTFBytes = function(string) {\n  for (var l = string.length, i = 0; i < l; i++)\n    this.writeByte(string.charCodeAt(i));\n};\n\nByteArray.prototype.writeBytes = function(array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++)\n    this.writeByte(array[i]);\n};\n\nfunction GIFEncoder(width, height) {\n  // image size\n  this.width = ~~width;\n  this.height = ~~height;\n\n  // transparent color if given\n  this.transparent = null;\n\n  // transparent index in color table\n  this.transIndex = 0;\n\n  // -1 = no repeat, 0 = forever. anything else is repeat count\n  this.repeat = -1;\n\n  // frame delay (hundredths)\n  this.delay = 0;\n\n  this.image = null; // current frame\n  this.pixels = null; // BGR byte array from frame\n  this.indexedPixels = null; // converted frame indexed to palette\n  this.colorDepth = null; // number of bit planes\n  this.colorTab = null; // RGB palette\n  this.usedEntry = new Array(); // active palette entries\n  this.palSize = 7; // color table size (bits-1)\n  this.dispose = -1; // disposal code (-1 = use default)\n  this.firstFrame = true;\n  this.sample = 10; // default sample interval for quantizer\n  this.dither = false; // default dithering\n  this.globalPalette = false;\n\n  this.out = new ByteArray();\n}\n\n/*\n  Sets the delay time between each frame, or changes it for subsequent frames\n  (applies to last frame added)\n*/\nGIFEncoder.prototype.setDelay = function(milliseconds) {\n  this.delay = Math.round(milliseconds / 10);\n};\n\n/*\n  Sets frame rate in frames per second.\n*/\nGIFEncoder.prototype.setFrameRate = function(fps) {\n  this.delay = Math.round(100 / fps);\n};\n\n/*\n  Sets the GIF frame disposal code for the last added frame and any\n  subsequent frames.\n\n  Default is 0 if no transparent color has been set, otherwise 2.\n*/\nGIFEncoder.prototype.setDispose = function(disposalCode) {\n  if (disposalCode >= 0) this.dispose = disposalCode;\n};\n\n/*\n  Sets the number of times the set of GIF frames should be played.\n\n  -1 = play once\n  0 = repeat indefinitely\n\n  Default is -1\n\n  Must be invoked before the first image is added\n*/\n\nGIFEncoder.prototype.setRepeat = function(repeat) {\n  this.repeat = repeat;\n};\n\n/*\n  Sets the transparent color for the last added frame and any subsequent\n  frames. Since all colors are subject to modification in the quantization\n  process, the color in the final palette for each frame closest to the given\n  color becomes the transparent color for that frame. May be set to null to\n  indicate no transparent color.\n*/\nGIFEncoder.prototype.setTransparent = function(color) {\n  this.transparent = color;\n};\n\n/*\n  Adds next GIF frame. The frame is not written immediately, but is\n  actually deferred until the next frame is received so that timing\n  data can be inserted.  Invoking finish() flushes all frames.\n*/\nGIFEncoder.prototype.addFrame = function(imageData) {\n  this.image = imageData;\n\n  this.colorTab = this.globalPalette ? this.globalPalette : null;\n\n  this.getImagePixels(); // convert to correct format if necessary\n  this.analyzePixels(); // build color table & map pixels\n\n  if (this.globalPalette === true) this.globalPalette = this.colorTab;\n\n  if (this.firstFrame) {\n    this.writeLSD(); // logical screen descriptior\n    this.writePalette(); // global color table\n    if (this.repeat >= 0) {\n      // use NS app extension to indicate reps\n      this.writeNetscapeExt();\n    }\n  }\n\n  this.writeGraphicCtrlExt(); // write graphic control extension\n  this.writeImageDesc(); // image descriptor\n  if (!this.firstFrame && !this.globalPalette) this.writePalette(); // local color table\n  this.writePixels(); // encode and write pixel data\n\n  this.firstFrame = false;\n};\n\n/*\n  Adds final trailer to the GIF stream, if you don't call the finish method\n  the GIF stream will not be valid.\n*/\nGIFEncoder.prototype.finish = function() {\n  this.out.writeByte(0x3b); // gif trailer\n};\n\n/*\n  Sets quality of color quantization (conversion of images to the maximum 256\n  colors allowed by the GIF specification). Lower values (minimum = 1)\n  produce better colors, but slow processing significantly. 10 is the\n  default, and produces good color mapping at reasonable speeds. Values\n  greater than 20 do not yield significant improvements in speed.\n*/\nGIFEncoder.prototype.setQuality = function(quality) {\n  if (quality < 1) quality = 1;\n  this.sample = quality;\n};\n\n/*\n  Sets dithering method. Available are:\n  - FALSE no dithering\n  - TRUE or FloydSteinberg\n  - FalseFloydSteinberg\n  - Stucki\n  - Atkinson\n  You can add '-serpentine' to use serpentine scanning\n*/\nGIFEncoder.prototype.setDither = function(dither) {\n  if (dither === true) dither = 'FloydSteinberg';\n  this.dither = dither;\n};\n\n/*\n  Sets global palette for all frames.\n  You can provide TRUE to create global palette from first picture.\n  Or an array of r,g,b,r,g,b,...\n*/\nGIFEncoder.prototype.setGlobalPalette = function(palette) {\n  this.globalPalette = palette;\n};\n\n/*\n  Returns global palette used for all frames.\n  If setGlobalPalette(true) was used, then this function will return\n  calculated palette after the first frame is added.\n*/\nGIFEncoder.prototype.getGlobalPalette = function() {\n  return (this.globalPalette && this.globalPalette.slice(0)) || this.globalPalette;\n};\n\n/*\n  Writes GIF file header\n*/\nGIFEncoder.prototype.writeHeader = function() {\n  this.out.writeUTFBytes(\"GIF89a\");\n};\n\n/*\n  Analyzes current frame colors and creates color map.\n*/\nGIFEncoder.prototype.analyzePixels = function() {\n  if (!this.colorTab) {\n    var imgq = new NeuQuant(this.pixels, this.sample);\n    imgq.buildColormap(); // create reduced palette\n    this.colorTab = imgq.getColormap();\n  }\n\n  // map image pixels to new palette\n  if (this.dither) {\n    this.ditherPixels(this.dither.replace('-serpentine', ''), this.dither.match(/-serpentine/) !== null);\n  } else {\n    this.indexPixels();\n  }\n\n  this.pixels = null;\n  this.colorDepth = 8;\n  this.palSize = 7;\n\n  // get closest match to transparent color if specified\n  if (this.transparent !== null) {\n    this.transIndex = this.findClosest(this.transparent, true);\n  }\n};\n\n/*\n  Index pixels, without dithering\n*/\nGIFEncoder.prototype.indexPixels = function(imgq) {\n  var nPix = this.pixels.length / 3;\n  this.indexedPixels = new Uint8Array(nPix);\n  var k = 0;\n  for (var j = 0; j < nPix; j++) {\n    var index = this.findClosestRGB(\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff\n    );\n    this.usedEntry[index] = true;\n    this.indexedPixels[j] = index;\n  }\n};\n\n/*\n  Taken from http://jsbin.com/iXofIji/2/edit by PAEz\n*/\nGIFEncoder.prototype.ditherPixels = function(kernel, serpentine) {\n  var kernels = {\n    FalseFloydSteinberg: [\n      [3 / 8, 1, 0],\n      [3 / 8, 0, 1],\n      [2 / 8, 1, 1]\n    ],\n    FloydSteinberg: [\n      [7 / 16, 1, 0],\n      [3 / 16, -1, 1],\n      [5 / 16, 0, 1],\n      [1 / 16, 1, 1]\n    ],\n    Stucki: [\n      [8 / 42, 1, 0],\n      [4 / 42, 2, 0],\n      [2 / 42, -2, 1],\n      [4 / 42, -1, 1],\n      [8 / 42, 0, 1],\n      [4 / 42, 1, 1],\n      [2 / 42, 2, 1],\n      [1 / 42, -2, 2],\n      [2 / 42, -1, 2],\n      [4 / 42, 0, 2],\n      [2 / 42, 1, 2],\n      [1 / 42, 2, 2]\n    ],\n    Atkinson: [\n      [1 / 8, 1, 0],\n      [1 / 8, 2, 0],\n      [1 / 8, -1, 1],\n      [1 / 8, 0, 1],\n      [1 / 8, 1, 1],\n      [1 / 8, 0, 2]\n    ]\n  };\n\n  if (!kernel || !kernels[kernel]) {\n    throw 'Unknown dithering kernel: ' + kernel;\n  }\n\n  var ds = kernels[kernel];\n  var index = 0,\n    height = this.height,\n    width = this.width,\n    data = this.pixels;\n  var direction = serpentine ? -1 : 1;\n\n  this.indexedPixels = new Uint8Array(this.pixels.length / 3);\n\n  for (var y = 0; y < height; y++) {\n\n    if (serpentine) direction = direction * -1;\n\n    for (var x = (direction == 1 ? 0 : width - 1), xend = (direction == 1 ? width : 0); x !== xend; x += direction) {\n\n      index = (y * width) + x;\n      // Get original colour\n      var idx = index * 3;\n      var r1 = data[idx];\n      var g1 = data[idx + 1];\n      var b1 = data[idx + 2];\n\n      // Get converted colour\n      idx = this.findClosestRGB(r1, g1, b1);\n      this.usedEntry[idx] = true;\n      this.indexedPixels[index] = idx;\n      idx *= 3;\n      var r2 = this.colorTab[idx];\n      var g2 = this.colorTab[idx + 1];\n      var b2 = this.colorTab[idx + 2];\n\n      var er = r1 - r2;\n      var eg = g1 - g2;\n      var eb = b1 - b2;\n\n      for (var i = (direction == 1 ? 0: ds.length - 1), end = (direction == 1 ? ds.length : 0); i !== end; i += direction) {\n        var x1 = ds[i][1]; // *direction;  //  Should this by timesd by direction?..to make the kernel go in the opposite direction....got no idea....\n        var y1 = ds[i][2];\n        if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n          var d = ds[i][0];\n          idx = index + x1 + (y1 * width);\n          idx *= 3;\n\n          data[idx] = Math.max(0, Math.min(255, data[idx] + er * d));\n          data[idx + 1] = Math.max(0, Math.min(255, data[idx + 1] + eg * d));\n          data[idx + 2] = Math.max(0, Math.min(255, data[idx + 2] + eb * d));\n        }\n      }\n    }\n  }\n};\n\n/*\n  Returns index of palette color closest to c\n*/\nGIFEncoder.prototype.findClosest = function(c, used) {\n  return this.findClosestRGB((c & 0xFF0000) >> 16, (c & 0x00FF00) >> 8, (c & 0x0000FF), used);\n};\n\nGIFEncoder.prototype.findClosestRGB = function(r, g, b, used) {\n  if (this.colorTab === null) return -1;\n\n  var c = b | (g << 8) | (r << 16);\n\n  var minpos = 0;\n  var dmin = 256 * 256 * 256;\n  var len = this.colorTab.length;\n\n  for (var i = 0; i < len;) {\n    var dr = r - (this.colorTab[i++] & 0xff);\n    var dg = g - (this.colorTab[i++] & 0xff);\n    var db = b - (this.colorTab[i] & 0xff);\n    var d = dr * dr + dg * dg + db * db;\n    var index = parseInt(i / 3);\n    if ((!used || this.usedEntry[index]) && (d < dmin)) {\n      dmin = d;\n      minpos = index;\n    }\n    i++;\n  }\n\n  return minpos;\n};\n\n/*\n  Extracts image pixels into byte array pixels\n  (removes alphachannel from canvas imagedata)\n*/\nGIFEncoder.prototype.getImagePixels = function() {\n  var w = this.width;\n  var h = this.height;\n  this.pixels = new Uint8Array(w * h * 3);\n\n  var data = this.image;\n  var count = 0;\n\n  for (var i = 0; i < h; i++) {\n    for (var j = 0; j < w; j++) {\n      var b = (i * w * 4) + j * 4;\n      this.pixels[count++] = data[b];\n      this.pixels[count++] = data[b+1];\n      this.pixels[count++] = data[b+2];\n    }\n  }\n};\n\n/*\n  Writes Graphic Control Extension\n*/\nGIFEncoder.prototype.writeGraphicCtrlExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xf9); // GCE label\n  this.out.writeByte(4); // data block size\n\n  var transp, disp;\n  if (this.transparent === null) {\n    transp = 0;\n    disp = 0; // dispose = no action\n  } else {\n    transp = 1;\n    disp = 2; // force clear if using transparent color\n  }\n\n  if (this.dispose >= 0) {\n    disp = dispose & 7; // user override\n  }\n  disp <<= 2;\n\n  // packed fields\n  this.out.writeByte(\n    0 | // 1:3 reserved\n    disp | // 4:6 disposal\n    0 | // 7 user input - 0 = none\n    transp // 8 transparency flag\n  );\n\n  this.writeShort(this.delay); // delay x 1/100 sec\n  this.out.writeByte(this.transIndex); // transparent color index\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes Image Descriptor\n*/\nGIFEncoder.prototype.writeImageDesc = function() {\n  this.out.writeByte(0x2c); // image separator\n  this.writeShort(0); // image position x,y = 0,0\n  this.writeShort(0);\n  this.writeShort(this.width); // image size\n  this.writeShort(this.height);\n\n  // packed fields\n  if (this.firstFrame || this.globalPalette) {\n    // no LCT - GCT is used for first (or only) frame\n    this.out.writeByte(0);\n  } else {\n    // specify normal LCT\n    this.out.writeByte(\n      0x80 | // 1 local color table 1=yes\n      0 | // 2 interlace - 0=no\n      0 | // 3 sorted - 0=no\n      0 | // 4-5 reserved\n      this.palSize // 6-8 size of color table\n    );\n  }\n};\n\n/*\n  Writes Logical Screen Descriptor\n*/\nGIFEncoder.prototype.writeLSD = function() {\n  // logical screen size\n  this.writeShort(this.width);\n  this.writeShort(this.height);\n\n  // packed fields\n  this.out.writeByte(\n    0x80 | // 1 : global color table flag = 1 (gct used)\n    0x70 | // 2-4 : color resolution = 7\n    0x00 | // 5 : gct sort flag = 0\n    this.palSize // 6-8 : gct size\n  );\n\n  this.out.writeByte(0); // background color index\n  this.out.writeByte(0); // pixel aspect ratio - assume 1:1\n};\n\n/*\n  Writes Netscape application extension to define repeat count.\n*/\nGIFEncoder.prototype.writeNetscapeExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xff); // app extension label\n  this.out.writeByte(11); // block size\n  this.out.writeUTFBytes('NETSCAPE2.0'); // app id + auth code\n  this.out.writeByte(3); // sub-block size\n  this.out.writeByte(1); // loop sub-block id\n  this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes color table\n*/\nGIFEncoder.prototype.writePalette = function() {\n  this.out.writeBytes(this.colorTab);\n  var n = (3 * 256) - this.colorTab.length;\n  for (var i = 0; i < n; i++)\n    this.out.writeByte(0);\n};\n\nGIFEncoder.prototype.writeShort = function(pValue) {\n  this.out.writeByte(pValue & 0xFF);\n  this.out.writeByte((pValue >> 8) & 0xFF);\n};\n\n/*\n  Encodes and writes pixel data\n*/\nGIFEncoder.prototype.writePixels = function() {\n  var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n  enc.encode(this.out);\n};\n\n/*\n  Retrieves the GIF stream\n*/\nGIFEncoder.prototype.stream = function() {\n  return this.out;\n};\n\nmodule.exports = GIFEncoder;\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n","/*\n* Copyright (c) 2015, Leon Sorokin\n* All rights reserved. (MIT Licensed)\n*\n* RgbQuant.js - an image quantization lib\n*/\n\n(function(){\n\tfunction RgbQuant(opts) {\n\t\topts = opts || {};\n\n\t\t// 1 = by global population, 2 = subregion population threshold\n\t\tthis.method = opts.method || 2;\n\t\t// desired final palette size\n\t\tthis.colors = opts.colors || 256;\n\t\t// # of highest-frequency colors to start with for palette reduction\n\t\tthis.initColors = opts.initColors || 4096;\n\t\t// color-distance threshold for initial reduction pass\n\t\tthis.initDist = opts.initDist || 0.01;\n\t\t// subsequent passes threshold\n\t\tthis.distIncr = opts.distIncr || 0.005;\n\t\t// palette grouping\n\t\tthis.hueGroups = opts.hueGroups || 10;\n\t\tthis.satGroups = opts.satGroups || 10;\n\t\tthis.lumGroups = opts.lumGroups || 10;\n\t\t// if > 0, enables hues stats and min-color retention per group\n\t\tthis.minHueCols = opts.minHueCols || 0;\n\t\t// HueStats instance\n\t\tthis.hueStats = this.minHueCols ? new HueStats(this.hueGroups, this.minHueCols) : null;\n\n\t\t// subregion partitioning box size\n\t\tthis.boxSize = opts.boxSize || [64,64];\n\t\t// number of same pixels required within box for histogram inclusion\n\t\tthis.boxPxls = opts.boxPxls || 2;\n\t\t// palette locked indicator\n\t\tthis.palLocked = false;\n\t\t// palette sort order\n//\t\tthis.sortPal = ['hue-','lum-','sat-'];\n\n\t\t// dithering/error diffusion kernel name\n\t\tthis.dithKern = opts.dithKern || null;\n\t\t// dither serpentine pattern\n\t\tthis.dithSerp = opts.dithSerp || false;\n\t\t// minimum color difference (0-1) needed to dither\n\t\tthis.dithDelta = opts.dithDelta || 0;\n\n\t\t// accumulated histogram\n\t\tthis.histogram = {};\n\t\t// palette - rgb triplets\n\t\tthis.idxrgb = opts.palette ? opts.palette.slice(0) : [];\n\t\t// palette - int32 vals\n\t\tthis.idxi32 = [];\n\t\t// reverse lookup {i32:idx}\n\t\tthis.i32idx = {};\n\t\t// {i32:rgb}\n\t\tthis.i32rgb = {};\n\t\t// enable color caching (also incurs overhead of cache misses and cache building)\n\t\tthis.useCache = opts.useCache !== false;\n\t\t// min color occurance count needed to qualify for caching\n\t\tthis.cacheFreq = opts.cacheFreq || 10;\n\t\t// allows pre-defined palettes to be re-indexed (enabling palette compacting and sorting)\n\t\tthis.reIndex = opts.reIndex || this.idxrgb.length == 0;\n\t\t// selection of color-distance equation\n\t\tthis.colorDist = opts.colorDist == \"manhattan\" ? distManhattan : distEuclidean;\n\n\t\t// if pre-defined palette, build lookups\n\t\tif (this.idxrgb.length > 0) {\n\t\t\tvar self = this;\n\t\t\tthis.idxrgb.forEach(function(rgb, i) {\n\t\t\t\tvar i32 = (\n\t\t\t\t\t(255    << 24) |\t// alpha\n\t\t\t\t\t(rgb[2] << 16) |\t// blue\n\t\t\t\t\t(rgb[1] <<  8) |\t// green\n\t\t\t\t\t rgb[0]\t\t\t\t// red\n\t\t\t\t) >>> 0;\n\n\t\t\t\tself.idxi32[i]\t\t= i32;\n\t\t\t\tself.i32idx[i32]\t= i;\n\t\t\t\tself.i32rgb[i32]\t= rgb;\n\t\t\t});\n\t\t}\n\t}\n\n\t// gathers histogram info\n\tRgbQuant.prototype.sample = function sample(img, width) {\n\t\tif (this.palLocked)\n\t\t\tthrow \"Cannot sample additional images, palette already assembled.\";\n\n\t\tvar data = getImageData(img, width);\n\n\t\tswitch (this.method) {\n\t\t\tcase 1: this.colorStats1D(data.buf32); break;\n\t\t\tcase 2: this.colorStats2D(data.buf32, data.width); break;\n\t\t}\n\t};\n\n\t// image quantizer\n\t// todo: memoize colors here also\n\t// @retType: 1 - Uint8Array (default), 2 - Indexed array, 3 - Match @img type (unimplemented, todo)\n\tRgbQuant.prototype.reduce = function reduce(img, retType, dithKern, dithSerp) {\n\t\tif (!this.palLocked)\n\t\t\tthis.buildPal();\n\n\t\tdithKern = dithKern || this.dithKern;\n\t\tdithSerp = typeof dithSerp != \"undefined\" ? dithSerp : this.dithSerp;\n\n\t\tretType = retType || 1;\n\n\t\t// reduce w/dither\n\t\tif (dithKern)\n\t\t\tvar out32 = this.dither(img, dithKern, dithSerp);\n\t\telse {\n\t\t\tvar data = getImageData(img),\n\t\t\t\tbuf32 = data.buf32,\n\t\t\t\tlen = buf32.length,\n\t\t\t\tout32 = new Uint32Array(len);\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tvar i32 = buf32[i];\n\t\t\t\tout32[i] = this.nearestColor(i32);\n\t\t\t}\n\t\t}\n\n\t\tif (retType == 1)\n\t\t\treturn new Uint8Array(out32.buffer);\n\n\t\tif (retType == 2) {\n\t\t\tvar out = [],\n\t\t\t\tlen = out32.length;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tvar i32 = out32[i];\n\t\t\t\tout[i] = this.i32idx[i32];\n\t\t\t}\n\n\t\t\treturn out;\n\t\t}\n\t};\n\n\t// adapted from http://jsbin.com/iXofIji/2/edit by PAEz\n\tRgbQuant.prototype.dither = function(img, kernel, serpentine) {\n\t\t// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\n\t\tvar kernels = {\n\t\t\tFloydSteinberg: [\n\t\t\t\t[7 / 16, 1, 0],\n\t\t\t\t[3 / 16, -1, 1],\n\t\t\t\t[5 / 16, 0, 1],\n\t\t\t\t[1 / 16, 1, 1]\n\t\t\t],\n\t\t\tFalseFloydSteinberg: [\n\t\t\t\t[3 / 8, 1, 0],\n\t\t\t\t[3 / 8, 0, 1],\n\t\t\t\t[2 / 8, 1, 1]\n\t\t\t],\n\t\t\tStucki: [\n\t\t\t\t[8 / 42, 1, 0],\n\t\t\t\t[4 / 42, 2, 0],\n\t\t\t\t[2 / 42, -2, 1],\n\t\t\t\t[4 / 42, -1, 1],\n\t\t\t\t[8 / 42, 0, 1],\n\t\t\t\t[4 / 42, 1, 1],\n\t\t\t\t[2 / 42, 2, 1],\n\t\t\t\t[1 / 42, -2, 2],\n\t\t\t\t[2 / 42, -1, 2],\n\t\t\t\t[4 / 42, 0, 2],\n\t\t\t\t[2 / 42, 1, 2],\n\t\t\t\t[1 / 42, 2, 2]\n\t\t\t],\n\t\t\tAtkinson: [\n\t\t\t\t[1 / 8, 1, 0],\n\t\t\t\t[1 / 8, 2, 0],\n\t\t\t\t[1 / 8, -1, 1],\n\t\t\t\t[1 / 8, 0, 1],\n\t\t\t\t[1 / 8, 1, 1],\n\t\t\t\t[1 / 8, 0, 2]\n\t\t\t],\n\t\t\tJarvis: [\t\t\t// Jarvis, Judice, and Ninke / JJN?\n\t\t\t\t[7 / 48, 1, 0],\n\t\t\t\t[5 / 48, 2, 0],\n\t\t\t\t[3 / 48, -2, 1],\n\t\t\t\t[5 / 48, -1, 1],\n\t\t\t\t[7 / 48, 0, 1],\n\t\t\t\t[5 / 48, 1, 1],\n\t\t\t\t[3 / 48, 2, 1],\n\t\t\t\t[1 / 48, -2, 2],\n\t\t\t\t[3 / 48, -1, 2],\n\t\t\t\t[5 / 48, 0, 2],\n\t\t\t\t[3 / 48, 1, 2],\n\t\t\t\t[1 / 48, 2, 2]\n\t\t\t],\n\t\t\tBurkes: [\n\t\t\t\t[8 / 32, 1, 0],\n\t\t\t\t[4 / 32, 2, 0],\n\t\t\t\t[2 / 32, -2, 1],\n\t\t\t\t[4 / 32, -1, 1],\n\t\t\t\t[8 / 32, 0, 1],\n\t\t\t\t[4 / 32, 1, 1],\n\t\t\t\t[2 / 32, 2, 1],\n\t\t\t],\n\t\t\tSierra: [\n\t\t\t\t[5 / 32, 1, 0],\n\t\t\t\t[3 / 32, 2, 0],\n\t\t\t\t[2 / 32, -2, 1],\n\t\t\t\t[4 / 32, -1, 1],\n\t\t\t\t[5 / 32, 0, 1],\n\t\t\t\t[4 / 32, 1, 1],\n\t\t\t\t[2 / 32, 2, 1],\n\t\t\t\t[2 / 32, -1, 2],\n\t\t\t\t[3 / 32, 0, 2],\n\t\t\t\t[2 / 32, 1, 2],\n\t\t\t],\n\t\t\tTwoSierra: [\n\t\t\t\t[4 / 16, 1, 0],\n\t\t\t\t[3 / 16, 2, 0],\n\t\t\t\t[1 / 16, -2, 1],\n\t\t\t\t[2 / 16, -1, 1],\n\t\t\t\t[3 / 16, 0, 1],\n\t\t\t\t[2 / 16, 1, 1],\n\t\t\t\t[1 / 16, 2, 1],\n\t\t\t],\n\t\t\tSierraLite: [\n\t\t\t\t[2 / 4, 1, 0],\n\t\t\t\t[1 / 4, -1, 1],\n\t\t\t\t[1 / 4, 0, 1],\n\t\t\t],\n\t\t};\n\n\t\tif (!kernel || !kernels[kernel]) {\n\t\t\tthrow 'Unknown dithering kernel: ' + kernel;\n\t\t}\n\n\t\tvar ds = kernels[kernel];\n\n\t\tvar data = getImageData(img),\n//\t\t\tbuf8 = data.buf8,\n\t\t\tbuf32 = data.buf32,\n\t\t\twidth = data.width,\n\t\t\theight = data.height,\n\t\t\tlen = buf32.length;\n\n\t\tvar dir = serpentine ? -1 : 1;\n\n\t\tfor (var y = 0; y < height; y++) {\n\t\t\tif (serpentine)\n\t\t\t\tdir = dir * -1;\n\n\t\t\tvar lni = y * width;\n\n\t\t\tfor (var x = (dir == 1 ? 0 : width - 1), xend = (dir == 1 ? width : 0); x !== xend; x += dir) {\n\t\t\t\t// Image pixel\n\t\t\t\tvar idx = lni + x,\n\t\t\t\t\ti32 = buf32[idx],\n\t\t\t\t\tr1 = (i32 & 0xff),\n\t\t\t\t\tg1 = (i32 & 0xff00) >> 8,\n\t\t\t\t\tb1 = (i32 & 0xff0000) >> 16;\n\n\t\t\t\t// Reduced pixel\n\t\t\t\tvar i32x = this.nearestColor(i32),\n\t\t\t\t\tr2 = (i32x & 0xff),\n\t\t\t\t\tg2 = (i32x & 0xff00) >> 8,\n\t\t\t\t\tb2 = (i32x & 0xff0000) >> 16;\n\n\t\t\t\tbuf32[idx] =\n\t\t\t\t\t(255 << 24)\t|\t// alpha\n\t\t\t\t\t(b2  << 16)\t|\t// blue\n\t\t\t\t\t(g2  <<  8)\t|\t// green\n\t\t\t\t\t r2;\n\n\t\t\t\t// dithering strength\n\t\t\t\tif (this.dithDelta) {\n\t\t\t\t\tvar dist = this.colorDist([r1, g1, b1], [r2, g2, b2]);\n\t\t\t\t\tif (dist < this.dithDelta)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Component distance\n\t\t\t\tvar er = r1 - r2,\n\t\t\t\t\teg = g1 - g2,\n\t\t\t\t\teb = b1 - b2;\n\n\t\t\t\tfor (var i = (dir == 1 ? 0 : ds.length - 1), end = (dir == 1 ? ds.length : 0); i !== end; i += dir) {\n\t\t\t\t\tvar x1 = ds[i][1] * dir,\n\t\t\t\t\t\ty1 = ds[i][2];\n\n\t\t\t\t\tvar lni2 = y1 * width;\n\n\t\t\t\t\tif (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n\t\t\t\t\t\tvar d = ds[i][0];\n\t\t\t\t\t\tvar idx2 = idx + (lni2 + x1);\n\n\t\t\t\t\t\tvar r3 = (buf32[idx2] & 0xff),\n\t\t\t\t\t\t\tg3 = (buf32[idx2] & 0xff00) >> 8,\n\t\t\t\t\t\t\tb3 = (buf32[idx2] & 0xff0000) >> 16;\n\n\t\t\t\t\t\tvar r4 = Math.max(0, Math.min(255, r3 + er * d)),\n\t\t\t\t\t\t\tg4 = Math.max(0, Math.min(255, g3 + eg * d)),\n\t\t\t\t\t\t\tb4 = Math.max(0, Math.min(255, b3 + eb * d));\n\n\t\t\t\t\t\tbuf32[idx2] =\n\t\t\t\t\t\t\t(255 << 24)\t|\t// alpha\n\t\t\t\t\t\t\t(b4  << 16)\t|\t// blue\n\t\t\t\t\t\t\t(g4  <<  8)\t|\t// green\n\t\t\t\t\t\t\t r4;\t\t\t// red\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn buf32;\n\t};\n\n\t// reduces histogram to palette, remaps & memoizes reduced colors\n\tRgbQuant.prototype.buildPal = function buildPal(noSort) {\n\t\tif (this.palLocked || this.idxrgb.length > 0 && this.idxrgb.length <= this.colors) return;\n\n\t\tvar histG  = this.histogram,\n\t\t\tsorted = sortedHashKeys(histG, true);\n\n\t\tif (sorted.length == 0)\n\t\t\tthrow \"Nothing has been sampled, palette cannot be built.\";\n\n\t\tswitch (this.method) {\n\t\t\tcase 1:\n\t\t\t\tvar cols = this.initColors,\n\t\t\t\t\tlast = sorted[cols - 1],\n\t\t\t\t\tfreq = histG[last];\n\n\t\t\t\tvar idxi32 = sorted.slice(0, cols);\n\n\t\t\t\t// add any cut off colors with same freq as last\n\t\t\t\tvar pos = cols, len = sorted.length;\n\t\t\t\twhile (pos < len && histG[sorted[pos]] == freq)\n\t\t\t\t\tidxi32.push(sorted[pos++]);\n\n\t\t\t\t// inject min huegroup colors\n\t\t\t\tif (this.hueStats)\n\t\t\t\t\tthis.hueStats.inject(idxi32);\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvar idxi32 = sorted;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// int32-ify values\n\t\tidxi32 = idxi32.map(function(v){return +v;});\n\n\t\tthis.reducePal(idxi32);\n\n\t\tif (!noSort && this.reIndex)\n\t\t\tthis.sortPal();\n\n\t\t// build cache of top histogram colors\n\t\tif (this.useCache)\n\t\t\tthis.cacheHistogram(idxi32);\n\n\t\tthis.palLocked = true;\n\t};\n\n\tRgbQuant.prototype.palette = function palette(tuples, noSort) {\n\t\tthis.buildPal(noSort);\n\t\treturn tuples ? this.idxrgb : new Uint8Array((new Uint32Array(this.idxi32)).buffer);\n\t};\n\n\tRgbQuant.prototype.prunePal = function prunePal(keep) {\n\t\tvar i32;\n\n\t\tfor (var j = 0; j < this.idxrgb.length; j++) {\n\t\t\tif (!keep[j]) {\n\t\t\t\ti32 = this.idxi32[j];\n\t\t\t\tthis.idxrgb[j] = null;\n\t\t\t\tthis.idxi32[j] = null;\n\t\t\t\tdelete this.i32idx[i32];\n\t\t\t}\n\t\t}\n\n\t\t// compact\n\t\tif (this.reIndex) {\n\t\t\tvar idxrgb = [],\n\t\t\t\tidxi32 = [],\n\t\t\t\ti32idx = {};\n\n\t\t\tfor (var j = 0, i = 0; j < this.idxrgb.length; j++) {\n\t\t\t\tif (this.idxrgb[j]) {\n\t\t\t\t\ti32 = this.idxi32[j];\n\t\t\t\t\tidxrgb[i] = this.idxrgb[j];\n\t\t\t\t\ti32idx[i32] = i;\n\t\t\t\t\tidxi32[i] = i32;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.idxrgb = idxrgb;\n\t\t\tthis.idxi32 = idxi32;\n\t\t\tthis.i32idx = i32idx;\n\t\t}\n\t};\n\n\t// reduces similar colors from an importance-sorted Uint32 rgba array\n\tRgbQuant.prototype.reducePal = function reducePal(idxi32) {\n\t\t// if pre-defined palette's length exceeds target\n\t\tif (this.idxrgb.length > this.colors) {\n\t\t\t// quantize histogram to existing palette\n\t\t\tvar len = idxi32.length, keep = {}, uniques = 0, idx, pruned = false;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\t// palette length reached, unset all remaining colors (sparse palette)\n\t\t\t\tif (uniques == this.colors && !pruned) {\n\t\t\t\t\tthis.prunePal(keep);\n\t\t\t\t\tpruned = true;\n\t\t\t\t}\n\n\t\t\t\tidx = this.nearestIndex(idxi32[i]);\n\n\t\t\t\tif (uniques < this.colors && !keep[idx]) {\n\t\t\t\t\tkeep[idx] = true;\n\t\t\t\t\tuniques++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!pruned) {\n\t\t\t\tthis.prunePal(keep);\n\t\t\t\tpruned = true;\n\t\t\t}\n\t\t}\n\t\t// reduce histogram to create initial palette\n\t\telse {\n\t\t\t// build full rgb palette\n\t\t\tvar idxrgb = idxi32.map(function(i32) {\n\t\t\t\treturn [\n\t\t\t\t\t(i32 & 0xff),\n\t\t\t\t\t(i32 & 0xff00) >> 8,\n\t\t\t\t\t(i32 & 0xff0000) >> 16,\n\t\t\t\t];\n\t\t\t});\n\n\t\t\tvar len = idxrgb.length,\n\t\t\t\tpalLen = len,\n\t\t\t\tthold = this.initDist;\n\n\t\t\t// palette already at or below desired length\n\t\t\tif (palLen > this.colors) {\n\t\t\t\twhile (palLen > this.colors) {\n\t\t\t\t\tvar memDist = [];\n\n\t\t\t\t\t// iterate palette\n\t\t\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\t\t\tvar pxi = idxrgb[i], i32i = idxi32[i];\n\t\t\t\t\t\tif (!pxi) continue;\n\n\t\t\t\t\t\tfor (var j = i + 1; j < len; j++) {\n\t\t\t\t\t\t\tvar pxj = idxrgb[j], i32j = idxi32[j];\n\t\t\t\t\t\t\tif (!pxj) continue;\n\n\t\t\t\t\t\t\tvar dist = this.colorDist(pxi, pxj);\n\n\t\t\t\t\t\t\tif (dist < thold) {\n\t\t\t\t\t\t\t\t// store index,rgb,dist\n\t\t\t\t\t\t\t\tmemDist.push([j, pxj, i32j, dist]);\n\n\t\t\t\t\t\t\t\t// kill squashed value\n\t\t\t\t\t\t\t\tdelete(idxrgb[j]);\n\t\t\t\t\t\t\t\tpalLen--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// palette reduction pass\n\t\t\t\t\t// console.log(\"palette length: \" + palLen);\n\n\t\t\t\t\t// if palette is still much larger than target, increment by larger initDist\n\t\t\t\t\tthold += (palLen > this.colors * 3) ? this.initDist : this.distIncr;\n\t\t\t\t}\n\n\t\t\t\t// if palette is over-reduced, re-add removed colors with largest distances from last round\n\t\t\t\tif (palLen < this.colors) {\n\t\t\t\t\t// sort descending\n\t\t\t\t\tsort.call(memDist, function(a,b) {\n\t\t\t\t\t\treturn b[3] - a[3];\n\t\t\t\t\t});\n\n\t\t\t\t\tvar k = 0;\n\t\t\t\t\twhile (palLen < this.colors) {\n\t\t\t\t\t\t// re-inject rgb into final palette\n\t\t\t\t\t\tidxrgb[memDist[k][0]] = memDist[k][1];\n\n\t\t\t\t\t\tpalLen++;\n\t\t\t\t\t\tk++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar len = idxrgb.length;\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tif (!idxrgb[i]) continue;\n\n\t\t\t\tthis.idxrgb.push(idxrgb[i]);\n\t\t\t\tthis.idxi32.push(idxi32[i]);\n\n\t\t\t\tthis.i32idx[idxi32[i]] = this.idxi32.length - 1;\n\t\t\t\tthis.i32rgb[idxi32[i]] = idxrgb[i];\n\t\t\t}\n\t\t}\n\t};\n\n\t// global top-population\n\tRgbQuant.prototype.colorStats1D = function colorStats1D(buf32) {\n\t\tvar histG = this.histogram,\n\t\t\tnum = 0, col,\n\t\t\tlen = buf32.length;\n\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tcol = buf32[i];\n\n\t\t\t// skip transparent\n\t\t\tif ((col & 0xff000000) >> 24 == 0) continue;\n\n\t\t\t// collect hue stats\n\t\t\tif (this.hueStats)\n\t\t\t\tthis.hueStats.check(col);\n\n\t\t\tif (col in histG)\n\t\t\t\thistG[col]++;\n\t\t\telse\n\t\t\t\thistG[col] = 1;\n\t\t}\n\t};\n\n\t// population threshold within subregions\n\t// FIXME: this can over-reduce (few/no colors same?), need a way to keep\n\t// important colors that dont ever reach local thresholds (gradients?)\n\tRgbQuant.prototype.colorStats2D = function colorStats2D(buf32, width) {\n\t\tvar boxW = this.boxSize[0],\n\t\t\tboxH = this.boxSize[1],\n\t\t\tarea = boxW * boxH,\n\t\t\tboxes = makeBoxes(width, buf32.length / width, boxW, boxH),\n\t\t\thistG = this.histogram,\n\t\t\tself = this;\n\n\t\tboxes.forEach(function(box) {\n\t\t\tvar effc = Math.max(Math.round((box.w * box.h) / area) * self.boxPxls, 2),\n\t\t\t\thistL = {}, col;\n\n\t\t\titerBox(box, width, function(i) {\n\t\t\t\tcol = buf32[i];\n\n\t\t\t\t// skip transparent\n\t\t\t\tif ((col & 0xff000000) >> 24 == 0) return;\n\n\t\t\t\t// collect hue stats\n\t\t\t\tif (self.hueStats)\n\t\t\t\t\tself.hueStats.check(col);\n\n\t\t\t\tif (col in histG)\n\t\t\t\t\thistG[col]++;\n\t\t\t\telse if (col in histL) {\n\t\t\t\t\tif (++histL[col] >= effc)\n\t\t\t\t\t\thistG[col] = histL[col];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\thistL[col] = 1;\n\t\t\t});\n\t\t});\n\n\t\tif (this.hueStats)\n\t\t\tthis.hueStats.inject(histG);\n\t};\n\n\t// TODO: group very low lum and very high lum colors\n\t// TODO: pass custom sort order\n\tRgbQuant.prototype.sortPal = function sortPal() {\n\t\tvar self = this;\n\n\t\tthis.idxi32.sort(function(a,b) {\n\t\t\tvar idxA = self.i32idx[a],\n\t\t\t\tidxB = self.i32idx[b],\n\t\t\t\trgbA = self.idxrgb[idxA],\n\t\t\t\trgbB = self.idxrgb[idxB];\n\n\t\t\tvar hslA = rgb2hsl(rgbA[0],rgbA[1],rgbA[2]),\n\t\t\t\thslB = rgb2hsl(rgbB[0],rgbB[1],rgbB[2]);\n\n\t\t\t// sort all grays + whites together\n\t\t\tvar hueA = (rgbA[0] == rgbA[1] && rgbA[1] == rgbA[2]) ? -1 : hueGroup(hslA.h, self.hueGroups);\n\t\t\tvar hueB = (rgbB[0] == rgbB[1] && rgbB[1] == rgbB[2]) ? -1 : hueGroup(hslB.h, self.hueGroups);\n\n\t\t\tvar hueDiff = hueB - hueA;\n\t\t\tif (hueDiff) return -hueDiff;\n\n\t\t\tvar lumDiff = lumGroup(+hslB.l.toFixed(2)) - lumGroup(+hslA.l.toFixed(2));\n\t\t\tif (lumDiff) return -lumDiff;\n\n\t\t\tvar satDiff = satGroup(+hslB.s.toFixed(2)) - satGroup(+hslA.s.toFixed(2));\n\t\t\tif (satDiff) return -satDiff;\n\t\t});\n\n\t\t// sync idxrgb & i32idx\n\t\tthis.idxi32.forEach(function(i32, i) {\n\t\t\tself.idxrgb[i] = self.i32rgb[i32];\n\t\t\tself.i32idx[i32] = i;\n\t\t});\n\t};\n\n\t// TOTRY: use HUSL - http://boronine.com/husl/\n\tRgbQuant.prototype.nearestColor = function nearestColor(i32) {\n\t\tvar idx = this.nearestIndex(i32);\n\t\treturn idx === null ? 0 : this.idxi32[idx];\n\t};\n\n\t// TOTRY: use HUSL - http://boronine.com/husl/\n\tRgbQuant.prototype.nearestIndex = function nearestIndex(i32) {\n\t\t// alpha 0 returns null index\n\t\tif ((i32 & 0xff000000) >> 24 == 0)\n\t\t\treturn null;\n\n\t\tif (this.useCache && (\"\"+i32) in this.i32idx)\n\t\t\treturn this.i32idx[i32];\n\n\t\tvar min = 1000,\n\t\t\tidx,\n\t\t\trgb = [\n\t\t\t\t(i32 & 0xff),\n\t\t\t\t(i32 & 0xff00) >> 8,\n\t\t\t\t(i32 & 0xff0000) >> 16,\n\t\t\t],\n\t\t\tlen = this.idxrgb.length;\n\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif (!this.idxrgb[i]) continue;\t\t// sparse palettes\n\n\t\t\tvar dist = this.colorDist(rgb, this.idxrgb[i]);\n\n\t\t\tif (dist < min) {\n\t\t\t\tmin = dist;\n\t\t\t\tidx = i;\n\t\t\t}\n\t\t}\n\n\t\treturn idx;\n\t};\n\n\tRgbQuant.prototype.cacheHistogram = function cacheHistogram(idxi32) {\n\t\tfor (var i = 0, i32 = idxi32[i]; i < idxi32.length && this.histogram[i32] >= this.cacheFreq; i32 = idxi32[i++])\n\t\t\tthis.i32idx[i32] = this.nearestIndex(i32);\n\t};\n\n\tfunction HueStats(numGroups, minCols) {\n\t\tthis.numGroups = numGroups;\n\t\tthis.minCols = minCols;\n\t\tthis.stats = {};\n\n\t\tfor (var i = -1; i < numGroups; i++)\n\t\t\tthis.stats[i] = {num: 0, cols: []};\n\n\t\tthis.groupsFull = 0;\n\t}\n\n\tHueStats.prototype.check = function checkHue(i32) {\n\t\tif (this.groupsFull == this.numGroups + 1)\n\t\t\tthis.check = function() {return;};\n\n\t\tvar r = (i32 & 0xff),\n\t\t\tg = (i32 & 0xff00) >> 8,\n\t\t\tb = (i32 & 0xff0000) >> 16,\n\t\t\thg = (r == g && g == b) ? -1 : hueGroup(rgb2hsl(r,g,b).h, this.numGroups),\n\t\t\tgr = this.stats[hg],\n\t\t\tmin = this.minCols;\n\n\t\tgr.num++;\n\n\t\tif (gr.num > min)\n\t\t\treturn;\n\t\tif (gr.num == min)\n\t\t\tthis.groupsFull++;\n\n\t\tif (gr.num <= min)\n\t\t\tthis.stats[hg].cols.push(i32);\n\t};\n\n\tHueStats.prototype.inject = function injectHues(histG) {\n\t\tfor (var i = -1; i < this.numGroups; i++) {\n\t\t\tif (this.stats[i].num <= this.minCols) {\n\t\t\t\tswitch (typeOf(histG)) {\n\t\t\t\t\tcase \"Array\":\n\t\t\t\t\t\tthis.stats[i].cols.forEach(function(col){\n\t\t\t\t\t\t\tif (histG.indexOf(col) == -1)\n\t\t\t\t\t\t\t\thistG.push(col);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Object\":\n\t\t\t\t\t\tthis.stats[i].cols.forEach(function(col){\n\t\t\t\t\t\t\tif (!histG[col])\n\t\t\t\t\t\t\t\thistG[col] = 1;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\thistG[col]++;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Rec. 709 (sRGB) luma coef\n\tvar Pr = .2126,\n\t\tPg = .7152,\n\t\tPb = .0722;\n\n\t// http://alienryderflex.com/hsp.html\n\tfunction rgb2lum(r,g,b) {\n\t\treturn Math.sqrt(\n\t\t\tPr * r*r +\n\t\t\tPg * g*g +\n\t\t\tPb * b*b\n\t\t);\n\t}\n\n\tvar rd = 255,\n\t\tgd = 255,\n\t\tbd = 255;\n\n\tvar euclMax = Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd);\n\t// perceptual Euclidean color distance\n\tfunction distEuclidean(rgb0, rgb1) {\n\t\tvar rd = rgb1[0]-rgb0[0],\n\t\t\tgd = rgb1[1]-rgb0[1],\n\t\t\tbd = rgb1[2]-rgb0[2];\n\n\t\treturn Math.sqrt(Pr*rd*rd + Pg*gd*gd + Pb*bd*bd) / euclMax;\n\t}\n\n\tvar manhMax = Pr*rd + Pg*gd + Pb*bd;\n\t// perceptual Manhattan color distance\n\tfunction distManhattan(rgb0, rgb1) {\n\t\tvar rd = Math.abs(rgb1[0]-rgb0[0]),\n\t\t\tgd = Math.abs(rgb1[1]-rgb0[1]),\n\t\t\tbd = Math.abs(rgb1[2]-rgb0[2]);\n\n\t\treturn (Pr*rd + Pg*gd + Pb*bd) / manhMax;\n\t}\n\n\t// http://rgb2hsl.nichabi.com/javascript-function.php\n\tfunction rgb2hsl(r, g, b) {\n\t\tvar max, min, h, s, l, d;\n\t\tr /= 255;\n\t\tg /= 255;\n\t\tb /= 255;\n\t\tmax = Math.max(r, g, b);\n\t\tmin = Math.min(r, g, b);\n\t\tl = (max + min) / 2;\n\t\tif (max == min) {\n\t\t\th = s = 0;\n\t\t} else {\n\t\t\td = max - min;\n\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\tswitch (max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g:\th = (b - r) / d + 2; break;\n\t\t\t\tcase b:\th = (r - g) / d + 4; break\n\t\t\t}\n\t\t\th /= 6;\n\t\t}\n//\t\th = Math.floor(h * 360)\n//\t\ts = Math.floor(s * 100)\n//\t\tl = Math.floor(l * 100)\n\t\treturn {\n\t\t\th: h,\n\t\t\ts: s,\n\t\t\tl: rgb2lum(r,g,b),\n\t\t};\n\t}\n\n\tfunction hueGroup(hue, segs) {\n\t\tvar seg = 1/segs,\n\t\t\thaf = seg/2;\n\n\t\tif (hue >= 1 - haf || hue <= haf)\n\t\t\treturn 0;\n\n\t\tfor (var i = 1; i < segs; i++) {\n\t\t\tvar mid = i*seg;\n\t\t\tif (hue >= mid - haf && hue <= mid + haf)\n\t\t\t\treturn i;\n\t\t}\n\t}\n\n\tfunction satGroup(sat) {\n\t\treturn sat;\n\t}\n\n\tfunction lumGroup(lum) {\n\t\treturn lum;\n\t}\n\n\tfunction typeOf(val) {\n\t\treturn Object.prototype.toString.call(val).slice(8,-1);\n\t}\n\n\tvar sort = isArrSortStable() ? Array.prototype.sort : stableSort;\n\n\t// must be used via stableSort.call(arr, fn)\n\tfunction stableSort(fn) {\n\t\tvar type = typeOf(this[0]);\n\n\t\tif (type == \"Number\" || type == \"String\") {\n\t\t\tvar ord = {}, len = this.length, val;\n\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tval = this[i];\n\t\t\t\tif (ord[val] || ord[val] === 0) continue;\n\t\t\t\tord[val] = i;\n\t\t\t}\n\n\t\t\treturn this.sort(function(a,b) {\n\t\t\t\treturn fn(a,b) || ord[a] - ord[b];\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tvar ord = this.map(function(v){return v});\n\n\t\t\treturn this.sort(function(a,b) {\n\t\t\t\treturn fn(a,b) || ord.indexOf(a) - ord.indexOf(b);\n\t\t\t});\n\t\t}\n\t}\n\n\t// test if js engine's Array#sort implementation is stable\n\tfunction isArrSortStable() {\n\t\tvar str = \"abcdefghijklmnopqrstuvwxyz\";\n\n\t\treturn \"xyzvwtursopqmnklhijfgdeabc\" == str.split(\"\").sort(function(a,b) {\n\t\t\treturn ~~(str.indexOf(b)/2.3) - ~~(str.indexOf(a)/2.3);\n\t\t}).join(\"\");\n\t}\n\n\t// returns uniform pixel data from various img\n\t// TODO?: if array is passed, createimagedata, createlement canvas? take a pxlen?\n\tfunction getImageData(img, width) {\n\t\tvar can, ctx, imgd, buf8, buf32, height;\n\n\t\tswitch (typeOf(img)) {\n\t\t\tcase \"HTMLImageElement\":\n\t\t\t\tcan = document.createElement(\"canvas\");\n\t\t\t\tcan.width = img.naturalWidth;\n\t\t\t\tcan.height = img.naturalHeight;\n\t\t\t\tctx = can.getContext(\"2d\");\n\t\t\t\tctx.drawImage(img,0,0);\n\t\t\tcase \"Canvas\":\n\t\t\tcase \"HTMLCanvasElement\":\n\t\t\t\tcan = can || img;\n\t\t\t\tctx = ctx || can.getContext(\"2d\");\n\t\t\tcase \"CanvasRenderingContext2D\":\n\t\t\t\tctx = ctx || img;\n\t\t\t\tcan = can || ctx.canvas;\n\t\t\t\timgd = ctx.getImageData(0, 0, can.width, can.height);\n\t\t\tcase \"ImageData\":\n\t\t\t\timgd = imgd || img;\n\t\t\t\twidth = imgd.width;\n\t\t\t\tif (typeOf(imgd.data) == \"CanvasPixelArray\")\n\t\t\t\t\tbuf8 = new Uint8Array(imgd.data);\n\t\t\t\telse\n\t\t\t\t\tbuf8 = imgd.data;\n\t\t\tcase \"Array\":\n\t\t\tcase \"CanvasPixelArray\":\n\t\t\t\tbuf8 = buf8 || new Uint8Array(img);\n\t\t\tcase \"Uint8Array\":\n\t\t\tcase \"Uint8ClampedArray\":\n\t\t\t\tbuf8 = buf8 || img;\n\t\t\t\tbuf32 = new Uint32Array(buf8.buffer);\n\t\t\tcase \"Uint32Array\":\n\t\t\t\tbuf32 = buf32 || img;\n\t\t\t\tbuf8 = buf8 || new Uint8Array(buf32.buffer);\n\t\t\t\twidth = width || buf32.length;\n\t\t\t\theight = buf32.length / width;\n\t\t}\n\n\t\treturn {\n\t\t\tcan: can,\n\t\t\tctx: ctx,\n\t\t\timgd: imgd,\n\t\t\tbuf8: buf8,\n\t\t\tbuf32: buf32,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t};\n\t}\n\n\t// partitions a rect of wid x hgt into\n\t// array of bboxes of w0 x h0 (or less)\n\tfunction makeBoxes(wid, hgt, w0, h0) {\n\t\tvar wnum = ~~(wid/w0), wrem = wid%w0,\n\t\t\thnum = ~~(hgt/h0), hrem = hgt%h0,\n\t\t\txend = wid-wrem, yend = hgt-hrem;\n\n\t\tvar bxs = [];\n\t\tfor (var y = 0; y < hgt; y += h0)\n\t\t\tfor (var x = 0; x < wid; x += w0)\n\t\t\t\tbxs.push({x:x, y:y, w:(x==xend?wrem:w0), h:(y==yend?hrem:h0)});\n\n\t\treturn bxs;\n\t}\n\n\t// iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\n\tfunction iterBox(bbox, wid, fn) {\n\t\tvar b = bbox,\n\t\t\ti0 = b.y * wid + b.x,\n\t\t\ti1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1),\n\t\t\tcnt = 0, incr = wid - b.w + 1, i = i0;\n\n\t\tdo {\n\t\t\tfn.call(this, i);\n\t\t\ti += (++cnt % b.w == 0) ? incr : 1;\n\t\t} while (i <= i1);\n\t}\n\n\t// returns array of hash keys sorted by their values\n\tfunction sortedHashKeys(obj, desc) {\n\t\tvar keys = [];\n\n\t\tfor (var key in obj)\n\t\t\tkeys.push(key);\n\n\t\treturn sort.call(keys, function(a,b) {\n\t\t\treturn desc ? obj[b] - obj[a] : obj[a] - obj[b];\n\t\t});\n\t}\n\n\t// expose\n\tthis.RgbQuant = RgbQuant;\n\n\t// expose to commonJS\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = RgbQuant;\n\t}\n\n}).call(this);"]}